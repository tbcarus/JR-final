plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ru.tbcarus'

// ./gradlew build -x test - сборка jar файла текущей версии
// ./gradlew build -Prelease -x test - сборка jar файла текущей версии с суффиксом -RELEASE
// ./gradlew build -Psnapshot -x test - сборка jar файла с инкрементом версии и суфиксом -SNAPSHOT
def versionEnvFile = file('.env')
def versionEnvs = new Properties()
versionEnvs.load(new FileInputStream(versionEnvFile))
def currentVersion = versionEnvs['APP_VERSION'].split("-")[0]
version = "${currentVersion}-SNAPSHOT"

def expectedFlags = ['snapshot', 'release']
if (expectedFlags.any { flag -> project.hasProperty(flag) }) {
    version = "${currentVersion}-RELEASE"

    if (project.hasProperty("snapshot")) {
        def (versionMajor, versionMinor, versionPatch) = currentVersion.tokenize('.').collect { it.toInteger() }
        versionPatch++
        def newVersion = "${versionMajor}.${versionMinor}.${versionPatch}".toString()
        version = "${newVersion}-SNAPSHOT"
        println "New version: ${version}"
    }
}
versionEnvFile.withWriter { writer ->
    versionEnvs['APP_VERSION'] = version.toString()
    versionEnvs.store(writer, null)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    enabled = false
    manifest {
        attributes 'Main-Class': 'ru.tbcarus.jrfinal.JrFinalApplication'
    }
    archiveBaseName = 'jr-final'
}

bootJar {
    archiveBaseName = 'jr-final'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.2.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

}

tasks.named('test') {
    useJUnitPlatform()
}
