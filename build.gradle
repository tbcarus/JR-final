plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ru.tbcarus'
//version = '0.0.1-SNAPSHOT'

task build {
    doLast {
        if (project.hasProperty("snapshot")) {
            // Чтение версии из файла version.properties
            def versionPropsFile = file('version.properties')
            if (!versionPropsFile.exists()) {
                throw new GradleException("version.properties file not found!")
            }

            def versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))

            // Получение текущей версии и удаление суффикса -SNAPSHOT
            def currentVersion = versionProps['version'].replace("-SNAPSHOT", "")

            // Разбор текущей версии
            def (versionMajor, versionMinor, versionPatch) = currentVersion.tokenize('.').collect { it.toInteger() }

            // Увеличение patch-версии
            versionPatch++

            // Формирование новой версии с суффиксом -SNAPSHOT
            def newVersion = "${versionMajor}.${versionMinor}.${versionPatch}-SNAPSHOT".toString()

            // Запись новой версии в файл
            versionPropsFile.withWriter { writer ->
                versionProps['version'] = newVersion
                versionProps.store(writer, null)
            }

            // Установка новой версии в проекте
            version = newVersion

            // Вывод новой версии в консоль
            println "New version: ${version}"
        }
    }
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ru.tbcarus.jrfinal.JrFinalApplication'
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.2.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

}

tasks.named('test') {
    useJUnitPlatform()
}
